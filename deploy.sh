#!/bin/bash
# version="0.1"
#
# ARG_OPTIONAL_SINGLE([resourcegroup],[],[Logic App Resource Group],[rg])
# ARG_OPTIONAL_SINGLE([storageaccountname],[],[Storage Account where files get uploaded],[stor])
# ARG_OPTIONAL_SINGLE([storageaccountsku],[],[Storage Account type],[Standard_LRS])
# ARG_OPTIONAL_SINGLE([containername],[],[Container where files get uploaded],[uploads])
# ARG_OPTIONAL_SINGLE([storconnectionname],[],[Name for connection to storage account],[storconn])
# ARG_OPTIONAL_SINGLE([videoconnectionname],[],[Name for connection to video indexer],[videoconn])
# ARG_OPTIONAL_SINGLE([logicappname],[],[Name of the Logic App],[logic])
# ARG_OPTIONAL_SINGLE([videoindexerregion])
# ARG_OPTIONAL_SINGLE([videoindexeraccount])
# ARG_OPTIONAL_SINGLE([videoindexerkey])
# ARG_OPTIONAL_SINGLE([videoindexerlanguage])
# ARG_OPTIONAL_SINGLE([zoommediatoken])
# ARG_OPTIONAL_SINGLE([zoommedialanguage])
# ARG_OPTIONAL_SINGLE([location],[],[Location for the Logic App Resource Group],[westeurope])
# ARG_VERSION([echo test v$version])
# ARG_HELP([The general script's help msg])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='vh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_resourcegroup="rg"
_arg_storageaccountname="stor"
_arg_storageaccountsku="Standard_LRS"
_arg_containername="uploads"
_arg_storconnectionname="storconn"
_arg_videoconnectionname="videoconn"
_arg_logicappname="logic"
_arg_videoindexerregion=
_arg_videoindexeraccount=
_arg_videoindexerkey=
_arg_videoindexerlanguage=
_arg_zoommediatoken=
_arg_zoommedialanguage=
_arg_location="westeurope"


print_help()
{
	printf '%s\n' "The general script's help msg"
	printf 'Usage: %s [--resourcegroup <arg>] [--storageaccountname <arg>] [--storageaccountsku <arg>] [--containername <arg>] [--storconnectionname <arg>] [--videoconnectionname <arg>] [--logicappname <arg>] [--videoindexerregion <arg>] [--videoindexeraccount <arg>] [--videoindexerkey <arg>] [--videoindexerlanguage <arg>] [--zoommediatoken <arg>] [--zoommedialanguage <arg>] [--location <arg>] [-v|--version] [-h|--help]\n' "$0"
	printf '\t%s\n' "--resourcegroup: Logic App Resource Group (default: 'rg')"
	printf '\t%s\n' "--storageaccountname: Storage Account where files get uploaded (default: 'stor')"
	printf '\t%s\n' "--storageaccountsku: Storage Account type (default: 'Standard_LRS')"
	printf '\t%s\n' "--containername: Container where files get uploaded (default: 'uploads')"
	printf '\t%s\n' "--storconnectionname: Name for connection to storage account (default: 'storconn')"
	printf '\t%s\n' "--videoconnectionname: Name for connection to video indexer (default: 'videoconn')"
	printf '\t%s\n' "--logicappname: Name of the Logic App (default: 'logic')"
	printf '\t%s\n' "--location: Location for the Logic App Resource Group (default: 'westeurope')"
	printf '\t%s\n' "-v, --version: Prints version"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--resourcegroup)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_resourcegroup="$2"
				shift
				;;
			--resourcegroup=*)
				_arg_resourcegroup="${_key##--resourcegroup=}"
				;;
			--storageaccountname)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_storageaccountname="$2"
				shift
				;;
			--storageaccountname=*)
				_arg_storageaccountname="${_key##--storageaccountname=}"
				;;
			--storageaccountsku)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_storageaccountsku="$2"
				shift
				;;
			--storageaccountsku=*)
				_arg_storageaccountsku="${_key##--storageaccountsku=}"
				;;
			--containername)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_containername="$2"
				shift
				;;
			--containername=*)
				_arg_containername="${_key##--containername=}"
				;;
			--storconnectionname)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_storconnectionname="$2"
				shift
				;;
			--storconnectionname=*)
				_arg_storconnectionname="${_key##--storconnectionname=}"
				;;
			--videoconnectionname)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_videoconnectionname="$2"
				shift
				;;
			--videoconnectionname=*)
				_arg_videoconnectionname="${_key##--videoconnectionname=}"
				;;
			--logicappname)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_logicappname="$2"
				shift
				;;
			--logicappname=*)
				_arg_logicappname="${_key##--logicappname=}"
				;;
			--videoindexerregion)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_videoindexerregion="$2"
				shift
				;;
			--videoindexerregion=*)
				_arg_videoindexerregion="${_key##--videoindexerregion=}"
				;;
			--videoindexeraccount)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_videoindexeraccount="$2"
				shift
				;;
			--videoindexeraccount=*)
				_arg_videoindexeraccount="${_key##--videoindexeraccount=}"
				;;
			--videoindexerkey)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_videoindexerkey="$2"
				shift
				;;
			--videoindexerkey=*)
				_arg_videoindexerkey="${_key##--videoindexerkey=}"
				;;
			--videoindexerlanguage)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_videoindexerlanguage="$2"
				shift
				;;
			--videoindexerlanguage=*)
				_arg_videoindexerlanguage="${_key##--videoindexerlanguage=}"
				;;
			--zoommediatoken)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_zoommediatoken="$2"
				shift
				;;
			--zoommediatoken=*)
				_arg_zoommediatoken="${_key##--zoommediatoken=}"
				;;
			--zoommedialanguage)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_zoommedialanguage="$2"
				shift
				;;
			--zoommedialanguage=*)
				_arg_zoommedialanguage="${_key##--zoommedialanguage=}"
				;;
			--location)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_location="$2"
				shift
				;;
			--location=*)
				_arg_location="${_key##--location=}"
				;;
			-v|--version)
				echo test v$version
				exit 0
				;;
			-v*)
				echo test v$version
				exit 0
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


set -e -u

# Creating Storage Account and Container
az group create --name $_arg_resourcegroup --location $_arg_location
az storage account create --name $_arg_storageaccountname --resource-group $_arg_resourcegroup --sku $_arg_storageaccountsku
az storage container create --name $_arg_containername --account-name $_arg_storageaccountname --resource-group $_arg_resourcegroup

# Retrieving Subscription ID
export SUBSCRIPTION_ID=$(az account  show -o json  | jq .id -r)
# Retrieving Storage Account Key
export STORAGE_ACCOUNT_KEY=$(az storage account  keys list  -g rg -n scriptixvidemo  | jq -r '.[0].value')

az deployment group create --resource-group $_arg_resourcegroup --name APIConnectionDeployment --template-file template.json \
  --parameters \
    subscriptionId=$SUBSCRIPTION_ID \
    location=$_arg_location \
    containerName=$_arg_containername \
    logicapp_name=$_arg_logicappname \
    storConnectionName=$_arg_storconnectionname \
    storageAccountKey=$STORAGE_ACCOUNT_KEY \
    storageAccountName=$_arg_storageaccountname \
    videoConnectionName=$_arg_videoconnectionname \
    videoindexeraccount=$_arg_videoindexeraccount \
    videoindexerkey=$_arg_videoindexerkey \
    videoindexerlanguage=$_arg_videoindexerlanguage \
    videoindexerregion=$_arg_videoindexerregion \
    zoommedialanguage=$_arg_zoommedialanguage \
    zoommediatoken=$_arg_zoommediatoken

# ] <-- needed because of Argbash